package main

/*
	Author : Iordanis Paschalidis
	Date   : 26/08/2021
*/

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/gorilla/mux"
	"github.com/rs/cors"
)

//Service object that contains the Port and Router of the application
type Service struct {
	Port   string
	Router *mux.Router
}

type AutoGenerated struct {
	Status string `json:"status"`
	Data   []struct {
		ID           int `json:"id"`
		PredictionID int `json:"predictionId"`
		ComponentID  int `json:"componentId"`
		TissueID     int `json:"tissueId"`
		Kd           struct {
			Value      float64 `json:"value"`
			Confidence string  `json:"confidence"`
		} `json:"kd"`
		SystematicContribution struct {
			Value      int    `json:"value"`
			Confidence string `json:"confidence"`
		} `json:"systematicContribution"`
		LocalContribution struct {
			Hia struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"hia"`
			Caco2 struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"caco2"`
			EffuxRatio struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"effux-ratio"`
			PgpSubstrate struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"pgp-substrate"`
			PgpInhibition struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"pgp-inhibition"`
			Ppb struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"ppb"`
			Vd struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"vd"`
			Bbb struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"bbb"`
			Halflife struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"halflife"`
			Clearance struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"clearance"`
			Cyp1A2Induction struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp1a2-induction"`
			Cyp1A2Inhibition struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp1a2-inhibition"`
			Cyp3A4Induction struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp3a4-induction"`
			Cyp3A4Inhibition struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp3a4-inhibition"`
			Cyp2C19Induction struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp2c19-induction"`
			Cyp2C19Inhibition struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp2c19-inhibition"`
			Cyp2C9Induction struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp2c9-induction"`
			Cyp2C9Inhibition struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp2c9-inhibition"`
			Cyp2D6Induction struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp2d6-induction"`
			Cyp2D6Inhibition struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cyp2d6-inhibition"`
			Fdamdd struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"fdamdd"`
			Dili struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"dili"`
			Acute struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"acute"`
			Herg struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"herg"`
			Cytoxicity struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"cytoxicity"`
			Skinsen struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"skinsen"`
			Ames struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"ames"`
			Hht struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"hht"`
			Logp struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"logp"`
			Logd struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"logd"`
			Logs struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"logs"`
			Mw struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"mw"`
			DHd struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"d-hd"`
			DHt struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"d-ht"`
			Potency struct {
				Value      float64 `json:"value"`
				Confidence string  `json:"confidence"`
			} `json:"potency"`
		} `json:"localContribution"`
		TargetID      int       `json:"targetId"`
		Perturbation  []float64 `json:"perturbation"`
		PeakCategory  string    `json:"peakCategory"`
		Name          string    `json:"name"`
		ComponentType string    `json:"componentType"`
		Code          string    `json:"code"`
		Identifiers   struct {
			MetanetxReactionID string `json:"metanetx.reaction_id"`
			BiocycID           string `json:"biocyc_id"`
			KeggReaction       string `json:"kegg_reaction"`
			SeedReactionID     string `json:"seed.reaction_id"`
			BiggReactionID     string `json:"bigg.reaction_id"`
		} `json:"identifiers,omitempty"`
		Smiles       string `json:"smiles"`
		TissueName   string `json:"tissueName"`
		Identifiers2 struct {
			MetanetxChemicalID string `json:"metanetx.chemical_id"`
			BiggMetaboliteID   string `json:"bigg.metabolite_id"`
		} `json:"identifiers,omitempty"`
		Identifiers3 struct {
			ChebiID            string `json:"chebi_id"`
			SeedCompoundID     string `json:"seed.compound_id"`
			MetanetxChemicalID string `json:"metanetx.chemical_id"`
			BiggMetaboliteID   string `json:"bigg.metabolite_id"`
			SabiorkID          string `json:"sabiork_id"`
			HmdbID             string `json:"hmdb_id"`
			InchiKeyID         string `json:"inchi_key_id"`
			KeggCompound       string `json:"kegg_compound"`
			BiocycID           string `json:"biocyc_id"`
		} `json:"identifiers,omitempty"`
		Identifiers4 struct {
			RefseqNameID    string `json:"refseq_name_id"`
			RefseqSynonymID string `json:"refseq_synonym_id"`
			OmimID          string `json:"omim_id"`
			NcbigeneID      string `json:"ncbigene_id"`
			HprdID          string `json:"hprd_id"`
			CcdsID          string `json:"ccds_id"`
		} `json:"identifiers,omitempty"`
		Identifiers5 struct {
			EnzymeEC           string `json:"enzyme_EC"`
			MetanetxReactionID string `json:"metanetx.reaction_id"`
			BiggReactionID     string `json:"bigg.reaction_id"`
		} `json:"identifiers,omitempty"`
		Identifiers6 struct {
			MetanetxReactionID string `json:"metanetx.reaction_id"`
			BiggReactionID     string `json:"bigg.reaction_id"`
		} `json:"identifiers,omitempty"`
		Identifiers7 struct {
			BiggReactionID string `json:"bigg.reaction_id"`
		} `json:"identifiers,omitempty"`
		Identifiers8 struct {
			MetanetxReactionID string `json:"metanetx.reaction_id"`
			BiggReactionID     string `json:"bigg.reaction_id"`
		} `json:"identifiers,omitempty"`
		Identifiers9 struct {
			BiggReactionID string `json:"bigg.reaction_id"`
		} `json:"identifiers,omitempty"`
		Identifiers10 struct {
			BiggMetaboliteID string `json:"bigg.metabolite_id"`
		} `json:"identifiers,omitempty"`
		Identifiers11 struct {
			RefseqNameID    string `json:"refseq_name_id"`
			CcdsID          string `json:"ccds_id"`
			RefseqSynonymID string `json:"refseq_synonym_id"`
			HprdID          string `json:"hprd_id"`
			OmimID          string `json:"omim_id"`
			NcbigeneID      string `json:"ncbigene_id"`
		} `json:"identifiers,omitempty"`
		Identifiers12 struct {
			OmimID          string `json:"omim_id"`
			RefseqSynonymID string `json:"refseq_synonym_id"`
			RefseqNameID    string `json:"refseq_name_id"`
			NcbigeneID      string `json:"ncbigene_id"`
			CcdsID          string `json:"ccds_id"`
		} `json:"identifiers,omitempty"`
		Identifiers13 struct {
			BiggReactionID string `json:"bigg.reaction_id"`
		} `json:"identifiers,omitempty"`
		Identifiers14 struct {
			NcbigiID        string `json:"ncbigi_id"`
			RefseqSynonymID string `json:"refseq_synonym_id"`
			CcdsID          string `json:"ccds_id"`
			OmimID          string `json:"omim_id"`
			RefseqNameID    string `json:"refseq_name_id"`
			NcbigeneID      string `json:"ncbigene_id"`
		} `json:"identifiers,omitempty"`
		Identifiers15 struct {
			BiggReactionID string `json:"bigg.reaction_id"`
		} `json:"identifiers,omitempty"`
		Identifiers16 struct {
			MetanetxChemicalID string `json:"metanetx.chemical_id"`
			BiggMetaboliteID   string `json:"bigg.metabolite_id"`
			HmdbID             string `json:"hmdb_id"`
			ChebiID            string `json:"chebi_id"`
			KeggDrugID         string `json:"kegg.drug_id"`
			InchiKeyID         string `json:"inchi_key_id"`
		} `json:"identifiers,omitempty"`
	} `json:"data"`
	Timestamp time.Time `json:"timestamp"`
}

func Middleware(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	jsonFile, _ := os.Open("targets.json")
	defer jsonFile.Close()
	byteValue, _ := ioutil.ReadAll(jsonFile)
	//var data interface{}
	//json.Unmarshal(byteValue, &data)
	w.WriteHeader(200)
	w.Write(byteValue)

}

func Middleware2(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")
	params := mux.Vars(r)
	id := params["id"]
	i, _ := strconv.Atoi(id)
	jsonFile, _ := os.Open("targets.json")
	defer jsonFile.Close()
	byteValue, _ := ioutil.ReadAll(jsonFile)
	var objmap AutoGenerated
	json.Unmarshal(byteValue, &objmap)
	jsonString, _ := json.Marshal(objmap.Data[i])

	//var data interface{}
	//json.Unmarshal(byteValue, &data)
	w.WriteHeader(200)
	w.Write(jsonString)

}

/*
   Running the service in port 8000
       Endpoints:
		POST:
			/v1/rec
*/
func (s Service) run() {
	fmt.Println("server running at port " + s.Port)
	s.Router.HandleFunc("/v1/rec", Middleware).Methods("GET")
	s.Router.HandleFunc("/v1/rec/{id}", Middleware2).Methods("GET")

	c := cors.New(cors.Options{
		AllowCredentials: true,
	})

	handler := c.Handler(s.Router)
	http.ListenAndServe(s.Port, handler)
}

func main() {
	port := ":8000"

	service := Service{Port: port, Router: mux.NewRouter().StrictSlash(true)}
	service.run()
}
